name: Android CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Add Local Properties
      env:
        BASE_URL: ${{secrets.BASE_URL}}
        GOOGLE_API_KEY: ${{secrets.GOOGLE_API_KEY}}
        KAKAO_API_KEY: ${{secrets.KAKAO_API_KEY}}
        SIGNING_STORE_PASSWORD: ${{secrets.SIGNING_STORE_PASSWORD}}
        SIGNING_KEY_ALIAS: ${{secrets.SIGNING_KEY_ALIAS}}
        SIGNING_KEY_PASSWORD: ${{secrets.SIGNING_KEY_PASSWORD}}
      run: |
        echo "BASE_URL=$BASE_URL" >> ./local.properties
        echo "GOOGLE_API_KEY=$GOOGLE_API_KEY" >> ./local.properties
        echo "KAKAO_API_KEY=$KAKAO_API_KEY" >> ./local.properties
        echo "SIGNING_STORE_PASSWORD=$SIGNING_STORE_PASSWORD" >> ./local.properties
        echo "SIGNING_KEY_ALIAS=$SIGNING_KEY_ALIAS" >> ./local.properties
        echo "SIGNING_KEY_PASSWORD=$SIGNING_KEY_PASSWORD" >> ./local.properties

    - name: Get Google Services JSON
      env:
        GOOGLE_SERVICES_JSON: ${{secrets.GOOGLE_SERVICES_JSON}}
      run:
        echo '$GOOGLE_SERVICES_JSON' > ./app/google-services.json

    - name: Create Keystore File
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        echo $KEYSTORE_BASE64 | base64 -d > ./app/runcombi-keystore.jks

    - name: Build with Gradle
      run: ./gradlew build

    - name: Build Release APK
      run: ./gradlew assembleRelease

    - name: Extract App Version
      id: app_version
      run: |
        VERSION_NAME=$(grep 'versionName' app/build.gradle.kts | sed 's/.*versionName = "\(.*\)"/\1/')
        VERSION_CODE=$(grep 'versionCode' app/build.gradle.kts | sed 's/.*versionCode = \([0-9]*\)/\1/')
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT

    - name: Upload Release Build to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: app/build/outputs/apk/release/
        if-no-files-found: error

    - name: Create Github Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.app_version.outputs.version_name }}
        release_name: RunCombi Android v${{ steps.app_version.outputs.version_name }}
        generate_release_notes: true
        files: |
          app/build/outputs/apk/release/app-release.apk
        body: |
          ## RunCombi Android v${{ steps.app_version.outputs.version_name }}
          
          **Version Code:** ${{ steps.app_version.outputs.version_code }}
          **Build Date:** ${{ github.event.head_commit.timestamp }}
          
          ### Changes
          - PR: ${{ github.event.pull_request.title }}
          - Author: @${{ github.event.pull_request.user.login }}
          - Branch: ${{ github.event.pull_request.head.ref }} → ${{ github.event.pull_request.base.ref }}

    - name: Upload artifact to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{secrets.FIREBASE_APP_ID}}
        serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
        groups: testers
        file: app/build/outputs/apk/release/app-release.apk
        releaseNotes: |
          RunCombi Android v${{ steps.app_version.outputs.version_name }}
          
          PR: ${{ github.event.pull_request.title }}
          Author: @${{ github.event.pull_request.user.login }}
          Branch: ${{ github.event.pull_request.head.ref }} → ${{ github.event.pull_request.base.ref }}

    - name: Upload APK to Slack
      if: ${{success()}}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        channel: '#general'
        text: 'RunCombi Android APK 빌드 완료! 🎉'
        file: app/build/outputs/apk/release/app-release.apk

    - name: If Success, Send notification on Slack
      if: ${{success()}}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: '#60E0C5'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: 'RunCombi Android PR Check Success ✅'
        MSG_MINIMAL: true
        SLACK_USERNAME: RunCombi Android
        SLACK_MESSAGE: 'RunCombi Android PR 체크 성공 🎉 (v${{ steps.app_version.outputs.version_name }} - ${{ steps.app_version.outputs.version_code }})%0A%0A**PR 제목:** ${{ github.event.pull_request.title }}%0A**PR 설명:** ${{ github.event.pull_request.body }}%0A**작성자:** @${{ github.event.pull_request.user.login }}%0A**브랜치:** ${{ github.event.pull_request.head.ref }} → ${{ github.event.pull_request.base.ref }}'

    - name: If Fail, Send notification on Slack
      if: ${{failure()}}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: '#ff0000'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: 'RunCombi Android PR Check Failed ❌'
        MSG_MINIMAL: true
        SLACK_USERNAME: RunCombi Android
        SLACK_MESSAGE: 'RunCombi Android PR 체크 실패 - 확인이 필요합니다 🔍 (v${{ steps.app_version.outputs.version_name }} - ${{ steps.app_version.outputs.version_code }})%0A%0A**PR 제목:** ${{ github.event.pull_request.title }}%0A**PR 설명:** ${{ github.event.pull_request.body }}%0A**작성자:** @${{ github.event.pull_request.user.login }}%0A**브랜치:** ${{ github.event.pull_request.head.ref }} → ${{ github.event.pull_request.base.ref }}'
