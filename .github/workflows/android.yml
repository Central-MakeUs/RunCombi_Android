name: Android CI

on:
  pull_request:
    branches: [ "master" ]

# 전체 워크플로우에 대한 권한 설정
permissions:
  contents: write

# 워크플로우 최적화
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    
    # 빌드 캐시 설정
    env:
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true -Dorg.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Setup Gradle Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Setup Android SDK Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.android/build-cache
          ~/.android/cache
        key: ${{ runner.os }}-android-${{ hashFiles('**/gradle.properties', '**/local.properties') }}
        restore-keys: |
          ${{ runner.os }}-android-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Set Gradle Memory Settings
      run: |
        cat > gradle.properties << 'EOF'
        # Project-wide Gradle settings.
        # IDE (e.g. Android Studio) users:
        # Gradle settings configured through the IDE *will override*
        # any settings specified in this file.
        # For more details on how to configure your build environment visit
        # http://www.gradle.org/docs/current/userguide/build_environment.html
        # Specifies the JVM arguments used for the daemon process.
        # The setting is particularly useful for tweaking memory settings.
        org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=512m -Dfile.encoding=UTF-8
        # When configured, Gradle will run in incubating parallel mode.
        # This option should only be used with decoupled projects. For more details, visit
        # https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
        # org.gradle.parallel=true
        # AndroidX package structure to make it clearer which packages are bundled with the
        # Android operating system, and which are packaged with your app's APK
        # https://developer.android.com/topic/libraries/support-library/androidx-rn
        android.useAndroidX=true
        # Kotlin code style for this project: "official" or "obsolete":
        kotlin.code.style=official
        # Enables namespacing of each library's R class so that its R class includes only the
        # resources declared in the library itself and none from the library's dependencies,
        # thereby reducing the size of the R class for that library
        android.nonTransitiveRClass=true
        EOF
        echo "Gradle properties file created with memory settings:"
        cat gradle.properties
      
    - name: Add Local Properties
      env:
        BASE_URL: ${{secrets.BASE_URL}}
        GOOGLE_API_KEY: ${{secrets.GOOGLE_API_KEY}}
        KAKAO_API_KEY: ${{secrets.KAKAO_API_KEY}}
        SIGNING_STORE_PASSWORD: ${{secrets.SIGNING_STORE_PASSWORD}}
        SIGNING_KEY_ALIAS: ${{secrets.SIGNING_KEY_ALIAS}}
        SIGNING_KEY_PASSWORD: ${{secrets.SIGNING_KEY_PASSWORD}}
      run: |
        echo "DEBUG: BASE_URL from secrets = '$BASE_URL'"
        cat > local.properties << EOF
        BASE_URL=$BASE_URL
        GOOGLE_API_KEY=$GOOGLE_API_KEY
        KAKAO_API_KEY=$KAKAO_API_KEY
        SIGNING_STORE_PASSWORD=$SIGNING_STORE_PASSWORD
        SIGNING_KEY_ALIAS=$SIGNING_KEY_ALIAS
        SIGNING_KEY_PASSWORD=$SIGNING_KEY_PASSWORD
        EOF
        echo "Created local.properties at project root:"
        ls -la local.properties
        cat local.properties

    - name: Get Google Services JSON
      env:
        GOOGLE_SERVICES_JSON: ${{secrets.GOOGLE_SERVICES_JSON}}
      run: |
        echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > ./app/google-services.json
        echo "Google Services JSON file created successfully"
        ls -la ./app/google-services.json

    - name: Create Keystore File
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        echo $KEYSTORE_BASE64 | base64 -d > ./app/runcombi-keystore.jks

    - name: Check if runcombi-keystore.jks exists
      run: |
        if [ -f "./app/runcombi-keystore.jks" ]; then
          echo "✅ runcombi-keystore.jks file exists in the app directory."
          ls -la ./app/runcombi-keystore.jks
        else
          echo "❌ Error: runcombi-keystore.jks file is missing in the app directory." >&2
          exit 1
        fi

    - name: List keys in runcombi-keystore.jks
      env:
        SIGNING_STORE_PASSWORD: ${{secrets.SIGNING_STORE_PASSWORD}}
      run: |
        echo "Checking keystore contents..."
        keytool -list -v -keystore ./app/runcombi-keystore.jks -storepass "$SIGNING_STORE_PASSWORD" || echo "Failed to list keystore contents"

    - name: Extract App Version
      id: app_version
      run: |
        VERSION_NAME=$(grep 'versionName' app/build.gradle.kts | sed 's/.*versionName = "\(.*\)"/\1/')
        VERSION_CODE=$(grep 'versionCode' app/build.gradle.kts | sed 's/.*versionCode = \([0-9]*\)/\1/')
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION_NAME ($VERSION_CODE)"



    - name: Build with Gradle
      run: ./gradlew build --parallel --max-workers=2 --daemon

    - name: Build Release APK
      run: |
        echo "Starting assembleRelease..."
        ./gradlew assembleRelease --parallel --max-workers=2 --daemon --info --stacktrace
        echo "assembleRelease completed with exit code: $?"
        echo "Checking if APK was generated..."
        if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
          echo "✅ APK file found!"
          ls -la app/build/outputs/apk/release/
        else
          echo "❌ APK file not found!"
          echo "Checking build directory..."
          ls -la app/build/outputs/ || echo "Outputs directory not found"
          echo "Checking for any APK files..."
          find app/build/outputs/ -name "*.apk" -type f || echo "No APK files found"
        fi

    - name: Check APK output
      run: |
        echo "Checking APK output directory..."
        ls -la app/build/outputs/apk/release/ || echo "Release directory not found"
        echo "Checking all APK outputs..."
        find app/build/outputs/ -name "*.apk" -type f || echo "No APK files found"
        echo "Checking build directory structure..."
        ls -la app/build/outputs/ || echo "Outputs directory not found"

    - name: Upload Release Build to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          app/build/outputs/apk/mock/release/
          app/build/outputs/apk/prod/release/
        if-no-files-found: error

    - name: Create Github Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.app_version.outputs.version_name }}
        release_name: RunCombi Android v${{ steps.app_version.outputs.version_name }}
        generate_release_notes: true
        files: |
          app/build/outputs/apk/mock/release/app-mock-release.apk
          app/build/outputs/apk/prod/release/app-prod-release.apk
        body: |
          ## RunCombi Android v${{ steps.app_version.outputs.version_name }}
          
          **Version Code:** ${{ steps.app_version.outputs.version_code }}
          **Build Date:** ${{ github.event.head_commit.timestamp }}
          
          ### Changes
          - PR: ${{ github.event.pull_request.title }}
          - Author: @${{ github.event.pull_request.user.login }}
          - Branch: ${{ github.event.pull_request.head.ref }} → ${{ github.event.pull_request.base.ref }}
          
          ### APK Files
          - **Mock Release**: app-mock-release.apk
          - **Prod Release**: app-prod-release.apk

    - name: Upload artifact to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{secrets.FIREBASE_APP_ID}}
        serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
        groups: testers
        file: app/build/outputs/apk/prod/release/app-prod-release.apk
        releaseNotes: |
          🚀 RunCombi Android v${{ steps.app_version.outputs.version_name }} 배포 완료!
          
          📱 **앱 버전**: v${{ steps.app_version.outputs.version_name }} (${{ steps.app_version.outputs.version_code }})
        notifyTesters: true

    - name: If Success, Send notification on Slack
      if: ${{success()}}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: '#60E0C5'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: 'RunCombi Android 빌드 성공 ✅'
        MSG_MINIMAL: true
        SLACK_USERNAME: RunCombi Android CI
        SLACK_MESSAGE: |
          🎉 RunCombi Android 빌드 성공!
          
          📱 **앱 버전**: v${{ steps.app_version.outputs.version_name }} (${{ steps.app_version.outputs.version_code }})
          🔗 **PR 제목**: ${{ github.event.pull_request.title }}
          📝 **PR 내용**: ${{ github.event.pull_request.body || '내용이 없습니다.' }}
          🚀 **GitHub Release**: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.app_version.outputs.version_name }}


